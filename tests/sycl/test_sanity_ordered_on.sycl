/*
 * traccc library, part of the ACTS project (R&D line)
 *
 * (c) 2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// vecmem includes
#include <vecmem/memory/sycl/device_memory_resource.hpp>
#include <vecmem/utils/sycl/async_copy.hpp>

// traccc includes
#include <traccc/definitions/qualifiers.hpp>

#include "../../device/sycl/src/sanity/ordered_on.hpp"
#include "traccc/sycl/utils/queue_wrapper.hpp"

// GTest include(s).
#include <gtest/gtest.h>

// System include
#include <CL/sycl.hpp>

struct int_lt_relation {
    TRACCC_HOST_DEVICE
    bool operator()(const int& a, const int& b) const { return a < b; }
};

struct int_leq_relation {
    TRACCC_HOST_DEVICE
    bool operator()(const int& a, const int& b) const { return a <= b; }
};

class SYCLSanityOrderedOn : public testing::Test {
    protected:
    SYCLSanityOrderedOn() : queue_wrapper(&queue), copy(&queue) {}

    vecmem::sycl::device_memory_resource mr;
    cl::sycl::queue queue;
    traccc::sycl::queue_wrapper queue_wrapper;
    vecmem::sycl::async_copy copy;
};

TEST_F(SYCLSanityOrderedOn, TrueConsecutiveNoRepeatsLeq) {
    std::vector<int> host_vector;

    for (int i = 0; i < 500000; ++i) {
        host_vector.push_back(i);
    }

    auto device_data = copy.to(vecmem::get_data(host_vector), mr,
                               vecmem::copy::type::host_to_device);

    ASSERT_TRUE(traccc::sycl::is_ordered_on(int_leq_relation(), mr, copy,
                                            queue_wrapper, device_data));
}

TEST_F(SYCLSanityOrderedOn, TrueConsecutiveNoRepeatsLt) {
    std::vector<int> host_vector;

    for (int i = 0; i < 500000; ++i) {
        host_vector.push_back(i);
    }

    auto device_data = copy.to(vecmem::get_data(host_vector), mr,
                               vecmem::copy::type::host_to_device);

    ASSERT_TRUE(traccc::sycl::is_ordered_on(int_lt_relation(), mr, copy,
                                            queue_wrapper, device_data));
}

TEST_F(SYCLSanityOrderedOn, TrueConsecutiveRepeatsLeq) {
    std::vector<int> host_vector;

    for (int i = 0; i < 5000; ++i) {
        for (int j = 0; j < i; ++j) {
            host_vector.push_back(i);
        }
    }

    auto device_data = copy.to(vecmem::get_data(host_vector), mr,
                               vecmem::copy::type::host_to_device);

    ASSERT_TRUE(traccc::sycl::is_ordered_on(int_leq_relation(), mr, copy,
                                            queue_wrapper, device_data));
}

TEST_F(SYCLSanityOrderedOn, FalseConsecutiveRepeatLt) {
    std::vector<int> host_vector;

    for (int i = 0; i < 5000; ++i) {
        for (int j = 0; j < i; ++j) {
            host_vector.push_back(i);
        }
    }

    auto device_data = copy.to(vecmem::get_data(host_vector), mr,
                               vecmem::copy::type::host_to_device);

    ASSERT_FALSE(traccc::sycl::is_ordered_on(int_lt_relation(), mr, copy,
                                             queue_wrapper, device_data));
}

TEST_F(SYCLSanityOrderedOn, TrueConsecutivePathologicalFirstLeq) {
    std::vector<int> host_vector;

    host_vector.push_back(4000);

    for (int i = 0; i < 5000; ++i) {
        for (int j = 0; j < i; ++j) {
            host_vector.push_back(i);
        }
    }

    auto device_data = copy.to(vecmem::get_data(host_vector), mr,
                               vecmem::copy::type::host_to_device);

    ASSERT_FALSE(traccc::sycl::is_ordered_on(int_leq_relation(), mr, copy,
                                             queue_wrapper, device_data));
}

TEST_F(SYCLSanityOrderedOn, TrueConsecutivePathologicalLastLeq) {
    std::vector<int> host_vector;

    host_vector.push_back(2000);

    for (int i = 0; i < 5000; ++i) {
        for (int j = 0; j < i; ++j) {
            host_vector.push_back(i);
        }
    }

    auto device_data = copy.to(vecmem::get_data(host_vector), mr,
                               vecmem::copy::type::host_to_device);

    ASSERT_FALSE(traccc::sycl::is_ordered_on(int_leq_relation(), mr, copy,
                                             queue_wrapper, device_data));
}
